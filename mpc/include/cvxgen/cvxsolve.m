% Produced by CVXGEN, 2021-06-20 16:41:19 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
P = params.P;
Q = params.Q;
if isfield(params, 'xD_1')
  xD_1 = params.xD_1;
elseif isfield(params, 'xD')
  xD_1 = params.xD{1};
else
  error 'could not find xD_1'
end
if isfield(params, 'xD_2')
  xD_2 = params.xD_2;
elseif isfield(params, 'xD')
  xD_2 = params.xD{2};
else
  error 'could not find xD_2'
end
if isfield(params, 'xD_3')
  xD_3 = params.xD_3;
elseif isfield(params, 'xD')
  xD_3 = params.xD{3};
else
  error 'could not find xD_3'
end
if isfield(params, 'xD_4')
  xD_4 = params.xD_4;
elseif isfield(params, 'xD')
  xD_4 = params.xD{4};
else
  error 'could not find xD_4'
end
if isfield(params, 'xD_5')
  xD_5 = params.xD_5;
elseif isfield(params, 'xD')
  xD_5 = params.xD{5};
else
  error 'could not find xD_5'
end
if isfield(params, 'xD_6')
  xD_6 = params.xD_6;
elseif isfield(params, 'xD')
  xD_6 = params.xD{6};
else
  error 'could not find xD_6'
end
if isfield(params, 'xD_7')
  xD_7 = params.xD_7;
elseif isfield(params, 'xD')
  xD_7 = params.xD{7};
else
  error 'could not find xD_7'
end
if isfield(params, 'xD_8')
  xD_8 = params.xD_8;
elseif isfield(params, 'xD')
  xD_8 = params.xD{8};
else
  error 'could not find xD_8'
end
if isfield(params, 'xD_9')
  xD_9 = params.xD_9;
elseif isfield(params, 'xD')
  xD_9 = params.xD{9};
else
  error 'could not find xD_9'
end
if isfield(params, 'xD_10')
  xD_10 = params.xD_10;
elseif isfield(params, 'xD')
  xD_10 = params.xD{10};
else
  error 'could not find xD_10'
end
if isfield(params, 'xD_11')
  xD_11 = params.xD_11;
elseif isfield(params, 'xD')
  xD_11 = params.xD{11};
else
  error 'could not find xD_11'
end
if isfield(params, 'xD_12')
  xD_12 = params.xD_12;
elseif isfield(params, 'xD')
  xD_12 = params.xD{12};
else
  error 'could not find xD_12'
end
if isfield(params, 'xD_13')
  xD_13 = params.xD_13;
elseif isfield(params, 'xD')
  xD_13 = params.xD{13};
else
  error 'could not find xD_13'
end
if isfield(params, 'xD_14')
  xD_14 = params.xD_14;
elseif isfield(params, 'xD')
  xD_14 = params.xD{14};
else
  error 'could not find xD_14'
end
if isfield(params, 'xD_15')
  xD_15 = params.xD_15;
elseif isfield(params, 'xD')
  xD_15 = params.xD{15};
else
  error 'could not find xD_15'
end
if isfield(params, 'xD_16')
  xD_16 = params.xD_16;
elseif isfield(params, 'xD')
  xD_16 = params.xD{16};
else
  error 'could not find xD_16'
end
if isfield(params, 'xD_17')
  xD_17 = params.xD_17;
elseif isfield(params, 'xD')
  xD_17 = params.xD{17};
else
  error 'could not find xD_17'
end
if isfield(params, 'xD_18')
  xD_18 = params.xD_18;
elseif isfield(params, 'xD')
  xD_18 = params.xD{18};
else
  error 'could not find xD_18'
end
if isfield(params, 'xD_19')
  xD_19 = params.xD_19;
elseif isfield(params, 'xD')
  xD_19 = params.xD{19};
else
  error 'could not find xD_19'
end
if isfield(params, 'xD_20')
  xD_20 = params.xD_20;
elseif isfield(params, 'xD')
  xD_20 = params.xD{20};
else
  error 'could not find xD_20'
end
if isfield(params, 'xD_21')
  xD_21 = params.xD_21;
elseif isfield(params, 'xD')
  xD_21 = params.xD{21};
else
  error 'could not find xD_21'
end
x_0 = params.x_0;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable x_1(6, 1);
  variable x_2(6, 1);
  variable x_3(6, 1);
  variable x_4(6, 1);
  variable x_5(6, 1);
  variable x_6(6, 1);
  variable x_7(6, 1);
  variable x_8(6, 1);
  variable x_9(6, 1);
  variable x_10(6, 1);
  variable x_11(6, 1);
  variable x_12(6, 1);
  variable x_13(6, 1);
  variable x_14(6, 1);
  variable x_15(6, 1);
  variable x_16(6, 1);
  variable x_17(6, 1);
  variable x_18(6, 1);
  variable x_19(6, 1);
  variable x_20(6, 1);
  variable x_21(6, 1);
  variable u_0(3, 1);
  variable u_1(3, 1);
  variable u_2(3, 1);
  variable u_3(3, 1);
  variable u_4(3, 1);
  variable u_5(3, 1);
  variable u_6(3, 1);
  variable u_7(3, 1);
  variable u_8(3, 1);
  variable u_9(3, 1);
  variable u_10(3, 1);
  variable u_11(3, 1);
  variable u_12(3, 1);
  variable u_13(3, 1);
  variable u_14(3, 1);
  variable u_15(3, 1);
  variable u_16(3, 1);
  variable u_17(3, 1);
  variable u_18(3, 1);
  variable u_19(3, 1);
  variable u_20(3, 1);

  minimize(quad_form(x_1 - xD_1, Q) + quad_form(x_2 - xD_2, Q) + quad_form(x_3 - xD_3, Q) + quad_form(x_4 - xD_4, Q) + quad_form(x_5 - xD_5, Q) + quad_form(x_6 - xD_6, Q) + quad_form(x_7 - xD_7, Q) + quad_form(x_8 - xD_8, Q) + quad_form(x_9 - xD_9, Q) + quad_form(x_10 - xD_10, Q) + quad_form(x_11 - xD_11, Q) + quad_form(x_12 - xD_12, Q) + quad_form(x_13 - xD_13, Q) + quad_form(x_14 - xD_14, Q) + quad_form(x_15 - xD_15, Q) + quad_form(x_16 - xD_16, Q) + quad_form(x_17 - xD_17, Q) + quad_form(x_18 - xD_18, Q) + quad_form(x_19 - xD_19, Q) + quad_form(x_20 - xD_20, Q) + quad_form(x_21 - xD_21, P));
  subject to
    x_1 == A*x_0 + B*u_0;
    x_2 == A*x_1 + B*u_1;
    x_3 == A*x_2 + B*u_2;
    x_4 == A*x_3 + B*u_3;
    x_5 == A*x_4 + B*u_4;
    x_6 == A*x_5 + B*u_5;
    x_7 == A*x_6 + B*u_6;
    x_8 == A*x_7 + B*u_7;
    x_9 == A*x_8 + B*u_8;
    x_10 == A*x_9 + B*u_9;
    x_11 == A*x_10 + B*u_10;
    x_12 == A*x_11 + B*u_11;
    x_13 == A*x_12 + B*u_12;
    x_14 == A*x_13 + B*u_13;
    x_15 == A*x_14 + B*u_14;
    x_16 == A*x_15 + B*u_15;
    x_17 == A*x_16 + B*u_16;
    x_18 == A*x_17 + B*u_17;
    x_19 == A*x_18 + B*u_18;
    x_20 == A*x_19 + B*u_19;
    x_21 == A*x_20 + B*u_20;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.u_5 = u_5;
vars.u{5} = u_5;
vars.u_6 = u_6;
vars.u{6} = u_6;
vars.u_7 = u_7;
vars.u{7} = u_7;
vars.u_8 = u_8;
vars.u{8} = u_8;
vars.u_9 = u_9;
vars.u{9} = u_9;
vars.u_10 = u_10;
vars.u{10} = u_10;
vars.u_11 = u_11;
vars.u{11} = u_11;
vars.u_12 = u_12;
vars.u{12} = u_12;
vars.u_13 = u_13;
vars.u{13} = u_13;
vars.u_14 = u_14;
vars.u{14} = u_14;
vars.u_15 = u_15;
vars.u{15} = u_15;
vars.u_16 = u_16;
vars.u{16} = u_16;
vars.u_17 = u_17;
vars.u{17} = u_17;
vars.u_18 = u_18;
vars.u{18} = u_18;
vars.u_19 = u_19;
vars.u{19} = u_19;
vars.u_20 = u_20;
vars.u{20} = u_20;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
vars.x_12 = x_12;
vars.x{12} = x_12;
vars.x_13 = x_13;
vars.x{13} = x_13;
vars.x_14 = x_14;
vars.x{14} = x_14;
vars.x_15 = x_15;
vars.x{15} = x_15;
vars.x_16 = x_16;
vars.x{16} = x_16;
vars.x_17 = x_17;
vars.x{17} = x_17;
vars.x_18 = x_18;
vars.x{18} = x_18;
vars.x_19 = x_19;
vars.x{19} = x_19;
vars.x_20 = x_20;
vars.x{20} = x_20;
vars.x_21 = x_21;
vars.x{21} = x_21;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
